"""todo 常用数据结构之元组:长度不可变，但是内容和类型可变"""
'''
列表用：[],元组用：(x,)或者用,分隔
**列表和元组都是容器型的数据类型**，
即一个变量可以保存多个数据，而且它们都是按一定顺序组织元素的有序容器。
**列表是可变数据类型**，**元组是不可变数据类型**，
所以列表可以添加元素、删除元素、清空元素、排序反转，但这些操作对元组来说是不成立的。
列表和元组都可以支持**拼接运算**、**成员运算**、**索引运算**、**切片运算**等操作，后面我们要讲到的字符串类型也支持这些运算，因为字符串就是字符按一定顺序构成的序列，在这一点上三者并没有什么区别。
我们**推荐大家使用列表的生成式语法来创建列表**，它不仅好用而且效率很高，是 Python 语言中非常有特色的语法。
'''
# 定义一个三元组
t1 = (35, 12, 98)
# 定义一个四元组
t2 = ('骆昊', 43, True, '四川成都')
# 查看变量的类型
print(type(t1))  # <class 'tuple'>
print(type(t2))  # <class 'tuple'>

# 查看元组中元素的数量
print(len(t1))  # 3
print(len(t2))  # 4

# 索引运算
print(t1[0])  # 35
print(t1[2])  # 98
print(t2[-1])  # 四川成都（这个索引等价于t2[0]），负数索引不包含0，从右往左从-1开始

# 切片运算
print(t2[:2])  # ('骆昊', 43) todo 不包含索引2，索引0,1,索引从0到1
print(t2[::3])  # ('骆昊', '四川成都')  todo 表示从序列 t2 中以步长为 3 提取元素。取索引0和3  【::x代表以x步长取】

# 成员运算 in
print(12 in t1)  # True

'''
一个元组中如果有两个元素，我们就称之为二元组；一个元组中如果五个元素，我们就称之为五元组。需要提醒大家注意的是，`()`表示空元组，但是如果元组中只有一个元素，需要加上一个逗号，否则`()`就不是代表元组的字面量语法，
而是改变运算优先级的圆括号，所以`('hello', )`和`(100, )`才是一元组，而`('hello')`和`(100)`只是字符串和整数。我们可以通过下面的代码来加以验证。
'''
empty_tuple = ()
# todo 代表一元组，不能写成 one_tuple = ('hello')
one_tuple = ('hello',)


# 打包操作
# a = 1, 10, 100,111
# print(type(a))  # <class 'tuple'>
# print(a)        # (1, 10, 100)
# # 解包操作 todo 其中的 *k 表示将剩余的元素收集到一个列表中。
# i, j, *k = a
# print(i, j, k)  # 1 10 [100, 111]


a, b, *c = range(1, 10)
print(a, b, c)
a, b, c = [1, 10, 100]
print(a, b, c)
a, *b, c = 'hello' # h ['e', 'l', 'l'] o 将字符串拆分
print(a, b, c)

# todo 当然，Python 中的元组和列表类型是可以相互转换的，我们可以通过下面的代码来完成该操作。
infos = ('骆昊', 43, True, '四川成都')
# 将元组转换成列表
print(list(infos))  # ['骆昊', 43, True, '四川成都']
frts = ['apple', 'banana', 'orange']
# 将列表转换成元组
print(tuple(frts))


